# YAML schema for GitHub Actions:
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
#
# Helpful YAML parser to clarify YAML syntax:
# https://yaml-online-parser.appspot.com/
#

name: PyPI Build Release All Backend Adapters

on:
  workflow_dispatch:
    inputs:
      package-version:
        description: 'Package Version'
        required: true
        default: '0.0.0'
        type: string

jobs:
  # Job 1: Build the wheel files for all platforms
  build:
    permissions:
      actions: write
    strategy:
      # Disable default fail-fast to allow our custom logic to run
      fail-fast: false
      matrix:
        runner: [Linux_runner_8_core, macos-latest, ubuntu-24.04-arm]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Record Job Start Time
        run: echo "JOB_START_TIME=$(date -u +%s)" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: python -m pip install --upgrade pip setuptools wheel twine

      - name: Build Package
        id: build_package
        continue-on-error: true
        run: |
          cd ./src/builtin-adapter
          ./python/pip_package/build_pip_package.sh ${{ github.event.inputs.package-version }}

      # This step decides IF we should cancel, but doesn't do the cancellation itself.
      # It runs only if the build step failed.
      - name: Check for Early Failure
        id: check_time
        if: steps.build_package.outcome == 'failure' && !cancelled()
        run: |
          echo "Build step failed. Checking elapsed time..."
          
          # Set the timeout in minutes
          TIMEOUT_MINUTES=30
          TIMEOUT_SECONDS=$((TIMEOUT_MINUTES * 60))
          
          CURRENT_TIME=$(date -u +%s)
          ELAPSED_TIME=$((CURRENT_TIME - JOB_START_TIME))
          
          echo "Job has been running for $ELAPSED_TIME seconds."

          if [[ $ELAPSED_TIME -lt $TIMEOUT_SECONDS ]]; then
            echo "Build failed within the $TIMEOUT_MINUTES minute window. Setting flag to cancel workflow."
            echo "cancel_run=true" >> $GITHUB_OUTPUT
          else
            echo "Build failed after the $TIMEOUT_MINUTES minute window. Allowing other jobs to continue."
            echo "cancel_run=false" >> $GITHUB_OUTPUT
          fi

      # This step uses the dedicated action to cancel the workflow.
      # It only runs if the previous step's output 'cancel_run' is true.
      - name: Cancel Workflow Run on Early Failure
        if: steps.check_time.outputs.cancel_run == 'true' && !cancelled()
        uses: styfle/cancel-workflow-action
        with:
          access_token: ${{ github.token }}
      
      # This step ensures the job is marked as "failure" in the UI if the build failed.
      # Without this, the job would appear successful because of 'continue-on-error'.
      - name: Report Build Failure
        if: steps.build_package.outcome == 'failure'
        run: |
          echo "Reporting failure for this job."
          exit 1

      # The following steps will only run if the build was successful.
      - name: Verify the Distribution
        run: twine check ./src/builtin-adapter/gen/adapter_pip/dist/*

      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.runner }}-${{ matrix.python-version }}
          path: ./src/builtin-adapter/gen/adapter_pip/dist/*.whl

  # Job 2: Create the GitHub Release after all builds are done
  release:
    needs: build
    # Add a condition to only release if all jobs succeeded
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Download all the wheel artifacts uploaded by the build jobs
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.whl
          prerelease: true
          tag_name: adapter-v${{ github.event.inputs.package-version }}
